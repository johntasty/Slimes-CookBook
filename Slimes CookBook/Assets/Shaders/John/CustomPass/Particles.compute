// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Particle
{
	float4x4 mat;
    float3 originPos;
};

// Particle's data, shared with the shader
RWStructuredBuffer<Particle> particleBuffers;

// Variables set from the CPU
float deltaTime;
float testDist;
float3 target;
float3 _PusherPosition;
[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float4x4 mat = particleBuffers[id.x].mat;
    float3 _OriginalPosition = particleBuffers[id.x].originPos;
	// In a transform matrix, the position (translation) vector is the last column.
	float3 position = float3(mat[0][3], mat[1][3], mat[2][3]);	
       
	float dist = distance(position, _PusherPosition);
    float originalDist = distance(_OriginalPosition, position);
	// Scale and reverse distance so that we get a value which fades as it gets further away.
	// Max distance is 5.0.
	dist = 1.0 - clamp(0.0, 1.0, dist);
    originalDist = testDist - clamp(0.0, testDist, originalDist);
    float weight = dist / (originalDist + dist);

    float3 pull = normalize(_OriginalPosition - position) * 0;
    float3 push = normalize(position - _PusherPosition) * dist;
    
    // Get the vector from the pusher to the position, and scale it.
    
    // Create a new translation matrix which represents a move in a direction.
    float4x4 translation = float4x4(
        1, 0, 0, push.x,
        0, 1, 0, push.y,
        0, 0, 1, push.z,
        0, 0, 0, 1
        );

    // Apply translation to existing matrix, which will be read in the shader.
    particleBuffers[id.x].mat = mul(translation, mat);
}